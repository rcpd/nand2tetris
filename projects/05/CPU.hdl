// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15],out=notOpcode);
	Not(in=notOpcode,out=opcode);
	
	// Determine whether instruction is A or C type
	XNor(a=instruction[15],b=false,out=aType);
	
	// Solve whether writeM is false (A inst) or variable (C inst)
	XNor(a=aType,b=false,out=aTypeXNor);
	And(a=aTypeXNor,b=instruction[3],out=writeM);
	
	Mux16(a=ALUout,b=instruction,sel=notOpcode,out=mux1out);
	
	// Solve whether aRegisterLoad is true (A inst) or variable (C inst)
	Or(a=aType,b=instruction[5],out=aRegisterLoad);
	
	// Solve whether dRegisterLoad is false (A inst) or variable (C inst)
	And(a=aTypeXNor,b=instruction[4],out=dRegisterLoad);
		
	ARegister(in=mux1out,load=aRegisterLoad,out=aRegisterOut,out[0..14]=addressM);
	DRegister(in=ALUout,load=dRegisterLoad,out=dRegisterOut);
	Mux16(a=aRegisterOut,b=inM,sel=instruction[12],out=mux2out);
	
	// evaluate jump code
	// block 1: evaluate jmp bits for 111 or other (removed)
	
	// block 2: evaluate zr/ng bits
	DMux4Way3(in=instruction[0..2],
	sel[0]=ngOut,sel[1]=zrOut,
	a[0]=aOut0,a[1]=aOut1,a[2]=aOut2,
	b[0]=bOut0,b[1]=bOut1,b[2]=bOut2,
	c[0]=cOut0,c[1]=cOut1,c[2]=cOut2,
	d[0]=dOut0,d[1]=dOut1,d[2]=dOut2);
	
	// block 2-1: evaluate zr=0/ng=0 (011,001,101,111 == LSB=1)
	And(a=aOut0,b=true,out=out21);
	
	// block 2-2: evaluate zr=0/ng=1 (100,101,110,111 == MSB=1)
	And(a=true,b=bOut2,out=out22);
	
	// block 2-3: evaluate zr=1/ng=0 (010,011,110,111 == MidB=1)
	And(a=true,b=cOut1,out=out23);
	
	// block 2-4: evaluate zr=1/ng=1 (should never happen)
	
	// block 3: evaluating block 1/2 outputs
	Or(a=out21,b=out22,out=out2122);
	Or(a=out22,b=out23,out=out2223);
	Or(a=out2122,b=out2223,out=jumpOut);
	
	// Solve whether jumpOut is false (A inst) or variable (C inst)
	And(a=aTypeXNor,b=jumpOut,out=jumpOutFinal);
	
	// Back to CPU glue code
	Not(in=jumpOutFinal,out=notJumpOutFinal);
	PC(in=aRegisterOut,load=jumpOutFinal,inc=notJumpOutFinal,reset=reset,out[0..14]=pc);
	ALU(x=dRegisterOut,y=mux2out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUout,zr=zrOut,ng=ngOut);
}