// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15]; //0=LSB,14=MSB
    OUT out[16];
	// RAM(L)    = 00000 or 000 0000 0000 0000 
	// RAM(H)    = 16383 or 011 1111 1111 1111 
	// SCREEN(L) = 16384 or 100 0000 0000 0000
	// SCREEN(H) = 24575 or 101 1111 1111 1111
	// KEYB      = 24576 or 110 0000 0000 0000
	
    PARTS:
	// determine which chip is being addressed from 2xMSB in address
	// A/B = RAM, C = SCREEN, D = KEYBOARD
	DMux4Way(in=true,sel[0]=address[13],sel[1]=address[14],a=aOut,b=bOut,c=cOut);
	Or(a=aOut,b=bOut,out=abOut);
	
	// determine what chip, if any, will load
	And(a=abOut,b=load,out=ramLoad); 
	And(a=cOut,b=load,out=screenLoad);
	
	// process memory maps: selective load, always read
    RAM16K(in=in,load=ramLoad,address=address[0..13],out=ramOut);
	Screen(in=in,load=screenLoad,address=address[0..12],out=screenOut); 
	Keyboard(out=keyOut);
	
	// select which out gets expressed
	Mux4Way16(a=ramOut,b=ramOut,c=screenOut,d=keyOut,sel[0]=address[13],sel[1]=address[14],out=out);
}