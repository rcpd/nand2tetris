<tokens>
<keyword> class </keyword>
<identifier> Keyboard </identifier>
<symbol> { </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> peek </identifier>
<symbol> ( </symbol>
<integerConstant> 24576 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> readChar </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> keyDown </identifier>
<symbol> , </symbol>
<identifier> keyUp </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printChar </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> keyUp </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> keyDown </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> keyDown </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> keyDown </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> keyUp </identifier>
<symbol> = </symbol>
<identifier> keyDown </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printChar </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<symbol> . </symbol>
<identifier> backSpace </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printChar </identifier>
<symbol> ( </symbol>
<identifier> keyUp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> keyUp </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<identifier> String </identifier>
<identifier> readLine </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<identifier> message </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> inputChar </identifier>
<symbol> , </symbol>
<identifier> newline </identifier>
<symbol> , </symbol>
<identifier> backspace </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> inputString </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> endOfLine </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> inputString </identifier>
<symbol> = </symbol>
<identifier> String </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<identifier> message </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newline </identifier>
<symbol> = </symbol>
<identifier> String </identifier>
<symbol> . </symbol>
<identifier> newLine </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> backspace </identifier>
<symbol> = </symbol>
<identifier> String </identifier>
<symbol> . </symbol>
<identifier> backSpace </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> endOfLine </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> inputChar </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readChar </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> endOfLine </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> inputChar </identifier>
<symbol> = </symbol>
<identifier> newline </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> endOfLine </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> inputChar </identifier>
<symbol> = </symbol>
<identifier> backspace </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> inputString </identifier>
<symbol> . </symbol>
<identifier> eraseLastChar </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> inputString </identifier>
<symbol> = </symbol>
<identifier> inputString </identifier>
<symbol> . </symbol>
<identifier> appendChar </identifier>
<symbol> ( </symbol>
<identifier> inputChar </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> inputString </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<identifier> message </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> inputString </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> inputInt </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> inputString </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readLine </identifier>
<symbol> ( </symbol>
<identifier> message </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> inputInt </identifier>
<symbol> = </symbol>
<identifier> inputString </identifier>
<symbol> . </symbol>
<identifier> intValue </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> inputString </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> inputInt </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
