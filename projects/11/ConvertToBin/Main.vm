// class Main

function Main.main 1
// var int value (local 0)
push constant 8000
push constant 1
push constant 500
call Main.fillMemory 3
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
push constant 8000
call Memory.peek 1
pop local 0 // value
push local 0 // value
call Main.convert 1
return

function Main.convert 3
// var int mask (local 0)
// var int position (local 1)
// var boolean loop (local 2)
push constant 1
neg
pop local 2 // loop

label WHILE_TEST_convert_0 // while <expression>
push local 2 // loop
if-goto WHILE_TRUE_convert_0
goto WHILE_FALSE_convert_0
label WHILE_TRUE_convert_0
push local 1 // position
push constant 1
add
pop local 1 // position
push local 0 // mask
call Main.nextMask 1
pop local 0 // mask

// if <expression>
push local 1 // position
push constant 16
gt
not
if-goto IF_TRUE_convert_0
goto IF_FALSE_convert_0
label IF_TRUE_convert_0

// if <expression>
push argument 0 // value
push local 0 // mask
and
push constant 0
eq
not
if-goto IF_TRUE_convert_1
goto IF_FALSE_convert_1
label IF_TRUE_convert_1
push constant 8000
push local 1 // position
add
push constant 1
call Memory.poke 2

// else
label IF_FALSE_convert_1
push constant 8000
push local 1 // position
add
push constant 0
call Memory.poke 2

// else
label IF_FALSE_convert_0
push constant 0
pop local 2 // loop

// end_while
goto WHILE_TEST_convert_0
label WHILE_FALSE_convert_0
return

function Main.nextMask 0

// if <expression>
push argument 0 // mask
push constant 0
eq
if-goto IF_TRUE_nextMask_0
goto IF_FALSE_nextMask_0
label IF_TRUE_nextMask_0
push constant 1
return

// else
label IF_FALSE_nextMask_0
push argument 0 // mask
push constant 2
call Math.multiply 2
return

function Main.fillMemory 0

label WHILE_TEST_fillMemory_0 // while <expression>
push argument 1 // length
push constant 0
gt
if-goto WHILE_TRUE_fillMemory_0
goto WHILE_FALSE_fillMemory_0
label WHILE_TRUE_fillMemory_0
push argument 0 // startAddress
push argument 2 // value
call Memory.poke 2
push argument 1 // length
push constant 1
neg
add
pop argument 1 // length
push argument 0 // startAddress
push constant 1
add
pop argument 0 // startAddress

// end_while
goto WHILE_TEST_fillMemory_0
label WHILE_FALSE_fillMemory_0
return
